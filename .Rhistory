ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = species) +
# add a geometry
geom_point()
penguins |>
ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_point()
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_point()
?facet_wrap()
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_point() +
facet_wrap(vars(species, island))
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_point() +
facet_wrap(vars(species, island)) +
geom_smooth(method = "lm")
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = culmen_length_mm,
y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_point() +
facet_wrap(vars(species, island)) +
geom_smooth(method = "lm", se = FALSE)
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
facet_wrap(vars(sex))
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
) +
# add a geometry
geom_histogram() # +
facet_wrap(~sex)
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
?write_csv
write_csv(penguins, "penguins_test.csv")
# install.packages("plotly")
library("plotly")
myplot = penguins |>
ggplot() +
# add the aesthetics
aes(x = body_mass_g,
y = flipper_length_mm,
colour = species) +
# add a geometry
geom_point() +
# tidy up the labels
labs(x = "Body mass (g)",
y = "Flipper length (mm)",
colour = "Species")
plotly::ggplotly(myplot)
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
facet_wrap(vars(species, island))
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() # +
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
colour = sex) +
# add a geometry
geom_histogram() +
facet_wrap(vars(species, island))
penguins |>
drop_na(sex) |>
ggplot() +
# add the aesthetics
aes(x = flipper_length_mm,
# y = flipper_length_mm,
fill = sex) +
# add a geometry
geom_histogram() +
facet_wrap(vars(species, island))
library(TrioR)
getwd()
setwd(/Users/cabiria/Desktop/manuscript/TrioR)
setwd("/Users/cabiria/Desktop/manuscript/TrioR")
devtools::load_all()
library(TrioR)
beggCIndexMetric
system.file("extdata", "testdata", package = "TrioR")
testCache <- system.file("extdata", "testdata", package = "TrioR")
Trio$new("figshare:26054188/47112109", cachePath = testCache)
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
#' Load downloaded files.
#' @param filePath A path to the file to load.
#' @noRd
loadFile <- function(filePath) {
ext <- tools::file_ext(filePath)
if (tolower(ext) == "rds") {
readRDS(filePath)
} else if (tolower(ext) == "zip") {
directory <- dirname(filePath)
decompressedPath <- utils::unzip(
filePath,
exdir = fs::path_join(c(directory, "decompressed"))
)
decompressedPath
} else if (tolower(ext) == "h5ad") {
if (!requireNamespace("anndata", quietly = TRUE)) {
cli::cli_abort(c(
"Reading H5AD files requires the {.pkg anndata} package.",
"i" = "Check {.url https://anndata.dynverse.org/} for instuctions."
))
}
anndata::read_h5ad(filePath)
} else if (tolower(ext) == "csv") {
if (!requireNamespace("anndata", quietly = TRUE)) {
cli::cli_abort(c(
"Reading H5AD files requires the {.pkg anndata} package.",
"i" = "Check {.url https://readr.tidyverse.org/} for instuctions."
))
}
readr::read_csv("filePath")
} else {
cli::cli_abort(c(
"File format {.file .{ext}} is not currently supported."
))
}
}
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
devtools::load_all()
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
trio
trio <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
devtools::load_all()
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
devtools::load_all()
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
survival_data <- trio |> purrr::pluck("data", 1)
survival_data
data <- trio |> purrr::pluck("data", 1)
data
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ ., data = train)
test_surv <- test[c("time", "status")]
train_surv <- train[c("time", "status")]
test_prediction <- predict(fit, newdata = test, type = "risk")
train_prediction <- predict(fit)
test_groundtruth <- with(test, survival::Surv(time, status))
overall <- with(data, survival::Surv(time, status))
groundtruth_list <- list(overall[-test_id, ], overall[test_id, ])
prediction_list <- list(train_prediction, test_prediction)
expected <- prediction_list
expected <- prediction(test)
prediction <- function(model, ts_data) {
predict(model, newdata = ts_data, type = "risk")
}
expected <- prediction(test)
?predict()
prediction <- function(model, ts_data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- prediction(test)
expected <- prediction(fit,test)
trio$addGS("cindex", fraction_zeros, c("Harrel CIndex"))
surv_risk_prediction <- function(model, ts_data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- surv_risk_prediction(fit,test)
surv_risk_predict <- function(model, data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- surv_risk_predict(fit,test)
surv_risk_predict <- function(model, ts_data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- surv_risk_predict(fit,test)
surv_risk_prediction <- function(model, ts_data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- surv_risk_prediction(fit,test)
surv_risk_pred <- function(model, ts_data) {
stats::predict(model, newdata = ts_data, type = "risk")
}
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_risk", surv_risk_pred, c("Harrel CIndex"))
surv_risk_pred <- function(model, data) {
stats::predict(model, newdata = data, type = "risk")
}
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_risk", surv_risk_pred, c("Harrel CIndex"))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
expected <- list(surv_risk_pred(fit,NULL) ,surv_risk_pred(fit,test))
surv_risk_pred(fit,test)
surv_risk_pred(fit,NULL)
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
stats::predict(model, type = "risk")
} else {
stats::predict(model, newdata = data, type = "risk")
}
}
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_risk", surv_risk_pred, c("Harrel CIndex"))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
expect_equal(actual, expected)
trio$addGS("surv_risk", surv_risk_pred, c("Harrel C-Index"))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(surv_risk = actual)
evaluation <- trio$evaluate(list(surv_risk = actual))
expect_equal
harrelCIndexMetric(actual, expected)
evaluation <- trio$evaluate(list(surv_risk_pred = actual))
trio$addGS("surv_risk", surv_risk_pred, c("Harrel C-Index"))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_risk_pred = actual))
evaluation <- trio$evaluate(list(surv_risk = actual))
evaluation <- trio$evaluate(list(surv_risk_pred = actual))
evaluation <- trio$evaluate(list(surv_risk_pred = actual))
evaluation <- trio$evaluate(list(surv_risk = actual))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_risk = actual))
actual_eval <- harrelCIndexMetric(actual, expected)
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_risk", "Harrel C-Index"))
evaluation <- trio$evaluate(list(surv_risk = actual))
trio
evaluation <- trio$evaluate(list(surv_risk = actual))
actual
evaluation <- trio$evaluate(list(surv_risk = actual))
evaluation <- trio$evaluate(list(surv_risk = c(fit,actual)))
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
sce <- trio |> purrr::pluck("data", 1)
expected <- fraction_zeros(sce)
trio$addGS("fracZero", fraction_zeros, c("KDE Score", "KDE Score 2"))
trio$addGS("fracZero2", fraction_zeros, c("KDE Score", "KDE Score 2"))
fraction_zeros <- function(sce) {
data <- data.frame(t(SummarizedExperiment::assay(sce, "counts")))
sapply(data, function(col) sum(col == 0) / length(col))
}
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
sce <- trio |> purrr::pluck("data", 1)
expected <- fraction_zeros(sce)
trio$addGS("fracZero", fraction_zeros, c("KDE Score", "KDE Score 2"))
trio$addGS("fracZero2", fraction_zeros, c("KDE Score", "KDE Score 2"))
actual <- trio$getGS("fracZero") |> purrr::pluck(1)
expect_equal(actual, expected)
trio$addMetric("KDE Score", kdeMetric)
trio$addMetric("KDE Score 2", kdeMetric)
evaluation <- trio$evaluate(list(fracZero = actual, fracZero2 = actual))
evaluation
actual_eval <- kdeMetric(actual, actual)
actual_eval
expect_equal(actual_eval, purrr::pluck(evaluation, "fracZero", "KDE Score"))
expect_equal(actual, expected)
list(fracZero = actual, fracZero2 = actual)
actual
actual
evaluation <- trio$evaluate(list(surv_risk = actual))
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ ., data = train)
test_surv <- test[c("time", "status")]
train_surv <- train[c("time", "status")]
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
stats::predict(model, type = "risk")
} else {
stats::predict(model, newdata = data, type = "risk")
}
}
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_risk", surv_risk_pred, c("Harrel C-Index"))
actual <- list(with(data, survival::Surv(time, status))[-test_id, ], with(data, survival::Surv(time, status))[test_id, ])
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_risk = actual))
surv_obj <- function(data){
with(data, survival::Surv(time, status))
}
surv_obj <- function(data){
with(data, survival::Surv(time, status))
}
surv_obj <- function(data){
with(data, survival::Surv(time, status))
}
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
trio$getGS("surv_obj") |> purrr::pluck(1)
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1)[-test_id, ], trio$getGS("surv_obj") |> purrr::pluck(1)[test_id, ])
trio$getGS("surv_obj") |> purrr::pluck(1)
class(trio$getGS("surv_obj") |> purrr::pluck(1))
class(with(data, survival::Surv(time, status)))
trio$getGS("surv_obj") |> purrr::pluck(1)
trio$getGS("surv_obj") |> purrr::pluck(1) |> [-test_id, ]
trio$getGS("surv_obj") |> purrr::pluck(1) |> `[`(-test_id)
trio$getGS("surv_obj") |> purrr::pluck(1) |> (-test_id)
getGS("surv_obj")
library(TrioR)
trio$getGS("surv_obj")
trio$getGS("surv_obj") |> purrr::pluck(1
)
trio$getGS("surv_obj") |> purrr::pluck(1) |> `[`(-test_id)
selected_surv_obj <- trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])()
selected_surv_obj
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])(), trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])())
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_risk = actual))
evaluation <- trio$evaluate(list(surv_obj = actual))
evaluation
actual_eval <- harrelCIndexMetric(actual, expected)
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_risk", "Harrel C-Index"))
expected
actual_eval
purrr::pluck(evaluation, "surv_risk", "Harrel C-Index")
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index"))
print(
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index")))
expected
devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ ., data = train)
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
stats::predict(model, type = "risk")
} else {
stats::predict(model, newdata = data, type = "risk")
}
}
surv_obj <- function(data){
with(data, survival::Surv(time, status))
}
# create expectation eg. risk in prediction, here is the list
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])(), trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])())
evaluation <- trio$evaluate(list(surv_obj = actual))
# create expectation eg. risk in prediction, here is the list
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])(), trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])())
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_obj = actual))
actual_eval <- harrelCIndexMetric(actual, expected)
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index"))
print(expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index")))
# create expectation eg. risk in prediction, here is the list
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])(), trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])())
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_obj = actual))
actual_eval <- harrelCIndexMetric(actual, expected)
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index"))
print(expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index")))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ ., data = train)
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
stats::predict(model, type = "risk")
} else {
stats::predict(model, newdata = data, type = "risk")
}
}
surv_obj <- function(data){
with(data, survival::Surv(time, status))
}
# create expectation eg. risk in prediction, here is the list
expected <- list(surv_risk_pred(fit,NULL),surv_risk_pred(fit,test))
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- list(trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[-test_id])(), trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])())
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
evaluation <- trio$evaluate(list(surv_obj = actual))
actual_eval <- harrelCIndexMetric(actual, expected)
expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index"))
print(expect_equal(actual_eval, purrr::pluck(evaluation, "surv_obj", "Harrel C-Index")))
