devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ age + sex + ph.ecog + pat.karno + meal.cal + wt.loss, data = train)
# data$index <- ifelse(1:nrow(data) %in% test_id, "test", "train")
# all_surv_obj <- with(data, survival::Surv(time, status))
fit
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
return(unname(stats::predict(model, type = "risk")))
} else {
return(unname(stats::predict(model, newdata = data, type = "risk")))
}
}
surv_obj <- function(data) {
all_surv_obj <- with(data, survival::Surv(time, status))
# test_index <- which(data$index == "test")
# train_index <- which(data$index == "train")
return(all_surv_obj)
}
harrelCIndexMetric <- function(to_eval, gs) {
browser()
harrelC1 <- Hmisc::rcorr.cens(to_eval, gs)
return(harrelC1["C Index"])
}
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])()
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
actual_eval <- harrelCIndexMetric(expected, actual)
gs
to_eval
# bug here, expected and actual are using different function, but currently it only support one function for actual and prediction.
# for example, in spatialsimbench, evaluation is only be one function for fraczero
evaluation <- trio$evaluate(list(surv_obj = expected)) # error
gs
to_eval
library(MuSiC)
devtools::install_github('xuranw/MuSiC')
trio
trio$data
data$index <- ifelse(1:nrow(data) %in% test_id, "test", "train")
data
trio$data <- data
trio$data
surv_obj <- function(data) {
all_surv_obj <- with(data, survival::Surv(time, status))
test_index <- which(data$index == "test")
train_index <- which(data$index == "train")
return(all_surv_obj)
}
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# bug here, expected and actual are using different function, but currently it only support one function for actual and prediction.
# for example, in spatialsimbench, evaluation is only be one function for fraczero
evaluation <- trio$evaluate(list(surv_obj = expected)) # error
devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ age + sex + ph.ecog + pat.karno + meal.cal + wt.loss, data = train)
data$index <- ifelse(1:nrow(data) %in% test_id, "test", "train")
# all_surv_obj <- with(data, survival::Surv(time, status))
fit
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
return(unname(stats::predict(model, type = "risk")))
} else {
return(unname(stats::predict(model, newdata = data, type = "risk")))
}
}
surv_obj <- function(data) {
all_surv_obj <- with(data, survival::Surv(time, status))
test_index <- which(data$index == "test")
train_index <- which(data$index == "train")
return(all_surv_obj)
}
harrelCIndexMetric <- function(to_eval, gs) {
# browser()
harrelC1 <- Hmisc::rcorr.cens(to_eval, gs)
return(harrelC1["C Index"])
}
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])()
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
# actual <- trio$getGS("surv_obj") |> purrr::pluck(1)
trio$data <- data
# bug here, expected and actual are using different function, but currently it only support one function for actual and prediction.
# for example, in spatialsimbench, evaluation is only be one function for fraczero
evaluation <- trio$evaluate(list(surv_obj = expected)) # error
devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ age + sex + ph.ecog + pat.karno + meal.cal + wt.loss, data = train)
data$index <- ifelse(1:nrow(data) %in% test_id, "test", "train")
# all_surv_obj <- with(data, survival::Surv(time, status))
fit
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
return(unname(stats::predict(model, type = "risk")))
} else {
return(unname(stats::predict(model, newdata = data, type = "risk")))
}
}
surv_obj <- function(data) {
test_data <- data[data$index == "test", ]
test_surv_obj <- with(test_data, survival::Surv(time, status))
return(test_surv_obj)
}
harrelCIndexMetric <- function(to_eval, gs) {
# browser()
harrelC1 <- Hmisc::rcorr.cens(to_eval, gs)
return(harrelC1["C Index"])
}
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1) |> (\(x) x[test_id])()
trio$data <- data
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1)
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1)
trio$data
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj") |> purrr::pluck(1)
trio$getGS("surv_obj")
test_data <- data[data$index == "test", ]
test_surv_obj <- with(test_data, survival::Surv(time, status))
test_surv_obj
surv_obj <- function(data) {
browser()
test_data <- data[data$index == "test", ]
test_surv_obj <- with(test_data, survival::Surv(time, status))
return(test_surv_obj)
}
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
# actual, same as expectation
actual <- trio$getGS("surv_obj")
data
devtools::load_all()
library(TrioR)
testCache <- system.file("extdata", "testdata", package = "TrioR")
trio <- Trio$new("figshare:26142922/47361046", cachePath = testCache)
data <- trio |> purrr::pluck("data", 1)
dplyr::glimpse(data)
cvSets <- cvTools::cvFolds(n = nrow(data), K = 3, R = 1)
j <- 1
test_id <- cvSets$subsets[cvSets$which == j]
test <- data[test_id, ]
train <- data[-test_id, ]
fit <- survival::coxph(survival::Surv(time, status) ~ age + sex + ph.ecog + pat.karno + meal.cal + wt.loss, data = train)
data$index <- ifelse(1:nrow(data) %in% test_id, "test", "train")
# all_surv_obj <- with(data, survival::Surv(time, status))
fit
surv_risk_pred <- function(model, data) {
if (is.null(data)) {
return(unname(stats::predict(model, type = "risk")))
} else {
return(unname(stats::predict(model, newdata = data, type = "risk")))
}
}
surv_obj <- function(data) {
# browser()
test_data <- data[data$index == "test", ]
test_surv_obj <- with(test_data, survival::Surv(time, status))
return(test_surv_obj)
}
harrelCIndexMetric <- function(to_eval, gs) {
# browser()
harrelC1 <- Hmisc::rcorr.cens(to_eval, gs)
return(harrelC1["C Index"])
}
trio$data <- data
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$data <- data
# create expectation eg. risk in prediction, here is the list
expected <- surv_risk_pred(fit,test)
trio$addGS("surv_obj", surv_obj, c("Harrel C-Index"))
trio$addMetric("Harrel C-Index", harrelCIndexMetric)
# actual, same as expectation
actual <- trio$getGS("surv_obj")
trio$data
