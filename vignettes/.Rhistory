spatialClustering = getSpatialCluster(data, simulated_symsim),
SVG = getSVG(simulated_symsim),
ctDecon = getctDecon(simulated_symsim, sc_data),
crosscor = getmoransI(simulated_symsim)
),
zinbwave = list(
FrazZeroCell = getFrazZeroCell(simulated_zinbwave),
ScaledVarGene = getScaledVarGene(simulated_zinbwave),
Lstat = getLstat(simulated_zinbwave),
spatialClustering = getSpatialCluster(data, simulated_zinbwave),
SVG = getSVG(simulated_zinbwave),
ctDecon = getctDecon(simulated_zinbwave, sc_data),
crosscor = getmoransI(simulated_zinbwave)
)
),
separateMethods = TRUE
)
evaluation <- trioB1$evaluate(
list(
SRTsim = list(
FrazZeroCell = getFrazZeroCell(simulated_SRTsim),
ScaledVarGene = getScaledVarGene(simulated_SRTsim),
Lstat = getLstat(simulated_SRTsim),
spatialClustering = getSpatialCluster(data, simulated_SRTsim),
SVG = getSVG(simulated_SRTsim),
ctDecon = getctDecon(simulated_SRTsim, sc_data),
crosscor = getmoransI(simulated_SRTsim)
),
scDesign3 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign3),
ScaledVarGene = getScaledVarGene(simulated_scDesign3),
Lstat = getLstat(simulated_scDesign3),
spatialClustering = getSpatialCluster(data, simulated_scDesign3),
SVG = getSVG(simulated_scDesign3),
ctDecon = getctDecon(simulated_scDesign3, sc_data),
crosscor = getmoransI(simulated_scDesign3)
),
scDesign2 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign2),
ScaledVarGene = getScaledVarGene(simulated_scDesign2),
Lstat = getLstat(simulated_scDesign2),
spatialClustering = getSpatialCluster(data, simulated_scDesign2),
SVG = getSVG(simulated_scDesign2),
ctDecon = getctDecon(simulated_scDesign2, sc_data),
crosscor = getmoransI(simulated_scDesign2)
),
symsim = list(
FrazZeroCell = getFrazZeroCell(simulated_symsim),
ScaledVarGene = getScaledVarGene(simulated_symsim),
Lstat = getLstat(simulated_symsim),
spatialClustering = getSpatialCluster(data, simulated_symsim),
SVG = getSVG(simulated_symsim),
ctDecon = getctDecon(simulated_symsim, sc_data),
crosscor = getmoransI(simulated_symsim)
),
zinbwave = list(
FrazZeroCell = getFrazZeroCell(simulated_zinbwave),
ScaledVarGene = getScaledVarGene(simulated_zinbwave),
Lstat = getLstat(simulated_zinbwave),
spatialClustering = getSpatialCluster(data, simulated_zinbwave),
SVG = getSVG(simulated_zinbwave),
ctDecon = getctDecon(simulated_zinbwave, sc_data),
crosscor = getmoransI(simulated_zinbwave)
)
),
separateMethods = TRUE
)
getFrazZeroCell(simulated_SRTsim)
FrazZeroCell
evaluation <- trioB1$evaluate(
list(
SRTsim = list(
FrazZeroCell = getFrazZeroCell(simulated_SRTsim),
ScaledVarGene = getScaledVarGene(simulated_SRTsim),
Lstat = getLstat(simulated_SRTsim),
spatialClustering = getSpatialCluster(data, simulated_SRTsim),
SVG = getSVG(simulated_SRTsim),
ctDecon = getctDecon(simulated_SRTsim, sc_data),
crosscor = getmoransI(simulated_SRTsim)
),
scDesign3 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign3),
ScaledVarGene = getScaledVarGene(simulated_scDesign3),
Lstat = getLstat(simulated_scDesign3),
spatialClustering = getSpatialCluster(data, simulated_scDesign3),
SVG = getSVG(simulated_scDesign3),
ctDecon = getctDecon(simulated_scDesign3, sc_data),
crosscor = getmoransI(simulated_scDesign3)
),
scDesign2 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign2),
ScaledVarGene = getScaledVarGene(simulated_scDesign2),
Lstat = getLstat(simulated_scDesign2),
spatialClustering = getSpatialCluster(data, simulated_scDesign2),
SVG = getSVG(simulated_scDesign2),
ctDecon = getctDecon(simulated_scDesign2, sc_data),
crosscor = getmoransI(simulated_scDesign2)
),
symsim = list(
FrazZeroCell = getFrazZeroCell(simulated_symsim),
ScaledVarGene = getScaledVarGene(simulated_symsim),
Lstat = getLstat(simulated_symsim),
spatialClustering = getSpatialCluster(data, simulated_symsim),
SVG = getSVG(simulated_symsim),
ctDecon = getctDecon(simulated_symsim, sc_data),
crosscor = getmoransI(simulated_symsim)
),
zinbwave = list(
FrazZeroCell = getFrazZeroCell(simulated_zinbwave),
ScaledVarGene = getScaledVarGene(simulated_zinbwave),
Lstat = getLstat(simulated_zinbwave),
spatialClustering = getSpatialCluster(data, simulated_zinbwave),
SVG = getSVG(simulated_zinbwave),
ctDecon = getctDecon(simulated_zinbwave, sc_data),
crosscor = getmoransI(simulated_zinbwave)
)
)
)
evaluation
evaluation$result
knitr::opts_chunk$set(warning = FALSE, message = FALSE, include=FALSE)
testCache <- tempdir()
trioB1 <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
trioB1 <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
data <- trioB1 |> purrr::pluck("data")
sc_data <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/real_sc.rds")
# data is counts matrix, or change to rds file
getFrazZeroCell <- function(data){
frac_zero_per_cell <- rowMeans(assay(data))
return(frac_zero_per_cell)
}
getScaledVarGene <- function(data){
scaled_var_per_gene <- scale(sparseMatrixStats::colVars(assay(data)))
return(scaled_var_per_gene)
}
getLstat <- function(data){
celltype <- colData(data)$spatial.cluster
adata <- as.matrix(assay(data))
sample <- rep("sample1", ncol(assay(data)))
x <- colData(data)$col
y <- colData(data)$row
spatialCoords <- list( x , y)
alldata <- scFeatures:::formatData(data = adata, sample = sample, celltype = celltype,
spatialCoords  = spatialCoords )
feature_L_function <- scFeatures::run_L_function(alldata, type = "spatial_p", ncores = 1)
return(feature_L_function)
}
getSpatialCluster <- function(rdata, sdata){
sim_sce <- BayesSpace::spatialPreprocess(sdata, n.PCs=7, platform="ST", n.HVGs=2000, log.normalize=FALSE)
sim_sce <- BayesSpace::spatialCluster(sim_sce,
q = length(unique(colData(rdata)$spatial.cluster)),
platform = "ST",
d = 7,
init.method = "mclust", model = "t", gamma = 2,
nrep = 1000, burn.in = 100,
save.chain = TRUE
)
sim_cluster <- sim_sce$spatial.cluster
return(sim_cluster)
}
getSVG <- function(data) {
sp_count <- assay(data)
location <- as.matrix(colData(data)[, c("col", "row")])
sp_count <- sp_count[!grepl("^(MT|mt)-", rownames(sp_count)), ]
sparkX <- suppressMessages(SPARK::sparkx(sp_count, location, numCores = 1, option = "mixture"))
return(sparkX)
}
getctDecon <- function(sp_data, sc_data) {
spatial_count <- SummarizedExperiment::assay(sp_data)
spatial_location <- data.frame(
x = as.numeric(SingleCellExperiment::colData(sp_data)$col),
y = as.numeric(SingleCellExperiment::colData(sp_data)$row)
)
sc_count <- SummarizedExperiment::assay(sc_data)
sc_meta <- data.frame(
cellID = colnames(sc_data),
cellType = SingleCellExperiment::colData(sc_data)$cell_type
)
sc_meta$sampleInfo = "sample1"
rownames(sc_meta) <- sc_meta$cellID
rownames(spatial_location) <- colnames(spatial_count)
CARD_obj <- CARD::createCARDObject(
sc_count = sc_count,
sc_meta = sc_meta,
spatial_count = spatial_count,
spatial_location = spatial_location,
ct.varname = "cellType",
ct.select = unique(sc_meta$cellType),
sample.varname = "sampleInfo",
minCountGene = 100,
minCountSpot = 5)
CARD_obj <- suppressMessages(CARD::CARD_deconvolution(CARD_object = CARD_obj) )
Proportion_CARD <- as.matrix(CARD_obj@Proportion_CARD)
return(Proportion_CARD)
}
getmoransI <- function(data) {
sp_count <- t(assay(data, "logcounts"))
loc <- as.matrix(colData(data)[, c("row", "col")])
weights <- 1 / as.matrix(dist(loc))
diag(weights) <- 0
res <- spots::BivariateMoransI(X =  sp_count, W = weights)
return(res)
}
################################################################################
getKDEstat <- function(to_eval, gs){
kde_stat <- ks::kde.test(x1 = as.numeric(to_eval), x2 = as.numeric(gs))$Tstat
return(kde_stat)
}
getARI <- function(to_eval, gs){
result <- aricode::ARI(gs, to_eval)
return(result)
}
getPrecision <- function(to_eval, gs) {
filtered_real_data <- dplyr::filter(gs$res_mtest, adjustedPval < 0.05)
filtered_compared_data <- dplyr::filter(to_eval$res_mtest, adjustedPval < 0.05)
tp <- length(intersect(row.names(filtered_real_data), row.names(filtered_compared_data)))
fp <- length(setdiff(row.names(filtered_compared_data), row.names(filtered_real_data)))
precision <- ifelse((tp + fp) > 0, tp / (tp + fp), NA)
return(precision)
}
getjds <- function(to_eval, gs) {
common_row_names <- intersect(rownames(to_eval), rownames(gs))
real_common <- to_eval[common_row_names, , drop = FALSE]
sim_common <- gs[common_row_names, , drop = FALSE]
jsd_values <- sapply(1:nrow(real_common), function(i) {
x.count <- rbind(as.vector(real_common[i, ]), as.vector(sim_common[i, ]))
philentropy::JSD(x.count, est.prob = "empirical")
})
average_jsd <- mean(jsd_values)
return(average_jsd)
}
getMantel <- function(to_eval, gs) {
mantel_test <- vegan::mantel(gs$Morans.I, to_eval$Morans.I, na.rm = TRUE, method = "pearson")
return(mantel_test$statistic)
}
# data properties
trioB1$addMetric("KDEstat", getKDEstat)
trioB1$addAuxData("FrazZeroCell", getFrazZeroCell, c("KDEstat"))
trioB1$addAuxData("ScaledVarGene", getScaledVarGene, c("KDEstat"))
trioB1$addAuxData("Lstat", getLstat, c("KDEstat"))
# spatial tasks
trioB1$addMetric("clusteringARI", getARI)
trioB1$addAuxData("spatialClustering", data$spatial.cluster, c("clusteringARI"))
# SVG
trioB1$addMetric("Precision", getPrecision)
trioB1$addAuxData("SVG", getSVG, c("Precision"))
# ctdeconvolute
trioB1$addMetric("JDS", getjds)
trioB1$addAuxData("ctDecon", getctDecon(data, sc_data), c("JDS"))
# crosscorrelation
trioB1$addMetric("Mantel", getMantel)
trioB1$addAuxData("crosscor", getmoransI, c("Mantel"))
simulated_SRTsim <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/SRTsim.rds")
simulated_scDesign3 <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/scDesign3.rds")
simulated_scDesign2 <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/scDesign2.rds")
simulated_symsim <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/symsim.rds")
simulated_zinbwave <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/zinbwave.rds")
evaluation <- trioB1$evaluate(
list(
SRTsim = list(
FrazZeroCell = getFrazZeroCell(simulated_SRTsim),
ScaledVarGene = getScaledVarGene(simulated_SRTsim),
Lstat = getLstat(simulated_SRTsim),
spatialClustering = getSpatialCluster(data, simulated_SRTsim),
SVG = getSVG(simulated_SRTsim),
ctDecon = getctDecon(simulated_SRTsim, sc_data),
crosscor = getmoransI(simulated_SRTsim)
),
scDesign3 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign3),
ScaledVarGene = getScaledVarGene(simulated_scDesign3),
Lstat = getLstat(simulated_scDesign3),
spatialClustering = getSpatialCluster(data, simulated_scDesign3),
SVG = getSVG(simulated_scDesign3),
ctDecon = getctDecon(simulated_scDesign3, sc_data),
crosscor = getmoransI(simulated_scDesign3)
),
scDesign2 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign2),
ScaledVarGene = getScaledVarGene(simulated_scDesign2),
Lstat = getLstat(simulated_scDesign2),
spatialClustering = getSpatialCluster(data, simulated_scDesign2),
SVG = getSVG(simulated_scDesign2),
ctDecon = getctDecon(simulated_scDesign2, sc_data),
crosscor = getmoransI(simulated_scDesign2)
),
symsim = list(
FrazZeroCell = getFrazZeroCell(simulated_symsim),
ScaledVarGene = getScaledVarGene(simulated_symsim),
Lstat = getLstat(simulated_symsim),
spatialClustering = getSpatialCluster(data, simulated_symsim),
SVG = getSVG(simulated_symsim),
ctDecon = getctDecon(simulated_symsim, sc_data),
crosscor = getmoransI(simulated_symsim)
),
zinbwave = list(
FrazZeroCell = getFrazZeroCell(simulated_zinbwave),
ScaledVarGene = getScaledVarGene(simulated_zinbwave),
Lstat = getLstat(simulated_zinbwave),
spatialClustering = getSpatialCluster(data, simulated_zinbwave),
SVG = getSVG(simulated_zinbwave),
ctDecon = getctDecon(simulated_zinbwave, sc_data),
crosscor = getmoransI(simulated_zinbwave)
)
)
)
evaluation
evaluation$result
unlist(evaluation$result)
evaluation$result
evaluation
evaluation$result <- as.numeric(unlist(evaluation$result))
evaluation
trioB1_insights <- benchmarkInsights$new(evaluation)
trioB1_insights
trioB1_insights$getHeatmap(trioB1_insights$evalSummary)
trioB1_insights$getCorplot(trioB1_insights$evalSummary, "GS")
trioB1_insights$getCorplot(trioB1_insights$evalSummary, "metric")
knitr::opts_chunk$set(warning = FALSE, message = FALSE, include=FALSE)
testCache <- tempdir()
trioB1 <- Trio$new("figshare:26054188/47112109", cachePath = testCache)
data <- trioB1 |> purrr::pluck("data")
sc_data <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/real_sc.rds")
# data is counts matrix, or change to rds file
getFrazZeroCell <- function(data){
frac_zero_per_cell <- rowMeans(assay(data))
return(frac_zero_per_cell)
}
getScaledVarGene <- function(data){
scaled_var_per_gene <- scale(sparseMatrixStats::colVars(assay(data)))
return(scaled_var_per_gene)
}
getLstat <- function(data){
celltype <- colData(data)$spatial.cluster
adata <- as.matrix(assay(data))
sample <- rep("sample1", ncol(assay(data)))
x <- colData(data)$col
y <- colData(data)$row
spatialCoords <- list( x , y)
alldata <- scFeatures:::formatData(data = adata, sample = sample, celltype = celltype,
spatialCoords  = spatialCoords )
feature_L_function <- scFeatures::run_L_function(alldata, type = "spatial_p", ncores = 1)
return(feature_L_function)
}
getSpatialCluster <- function(rdata, sdata){
sim_sce <- BayesSpace::spatialPreprocess(sdata, n.PCs=7, platform="ST", n.HVGs=2000, log.normalize=FALSE)
sim_sce <- BayesSpace::spatialCluster(sim_sce,
q = length(unique(colData(rdata)$spatial.cluster)),
platform = "ST",
d = 7,
init.method = "mclust", model = "t", gamma = 2,
nrep = 1000, burn.in = 100,
save.chain = TRUE
)
sim_cluster <- sim_sce$spatial.cluster
return(sim_cluster)
}
getSVG <- function(data) {
sp_count <- assay(data)
location <- as.matrix(colData(data)[, c("col", "row")])
sp_count <- sp_count[!grepl("^(MT|mt)-", rownames(sp_count)), ]
sparkX <- suppressMessages(SPARK::sparkx(sp_count, location, numCores = 1, option = "mixture"))
return(sparkX)
}
getctDecon <- function(sp_data, sc_data) {
spatial_count <- SummarizedExperiment::assay(sp_data)
spatial_location <- data.frame(
x = as.numeric(SingleCellExperiment::colData(sp_data)$col),
y = as.numeric(SingleCellExperiment::colData(sp_data)$row)
)
sc_count <- SummarizedExperiment::assay(sc_data)
sc_meta <- data.frame(
cellID = colnames(sc_data),
cellType = SingleCellExperiment::colData(sc_data)$cell_type
)
sc_meta$sampleInfo = "sample1"
rownames(sc_meta) <- sc_meta$cellID
rownames(spatial_location) <- colnames(spatial_count)
CARD_obj <- CARD::createCARDObject(
sc_count = sc_count,
sc_meta = sc_meta,
spatial_count = spatial_count,
spatial_location = spatial_location,
ct.varname = "cellType",
ct.select = unique(sc_meta$cellType),
sample.varname = "sampleInfo",
minCountGene = 100,
minCountSpot = 5)
CARD_obj <- suppressMessages(CARD::CARD_deconvolution(CARD_object = CARD_obj) )
Proportion_CARD <- as.matrix(CARD_obj@Proportion_CARD)
return(Proportion_CARD)
}
getmoransI <- function(data) {
sp_count <- t(assay(data, "logcounts"))
loc <- as.matrix(colData(data)[, c("row", "col")])
weights <- 1 / as.matrix(dist(loc))
diag(weights) <- 0
res <- spots::BivariateMoransI(X =  sp_count, W = weights)
return(res)
}
################################################################################
getKDEstat <- function(to_eval, gs){
kde_stat <- ks::kde.test(x1 = as.numeric(to_eval), x2 = as.numeric(gs))$Tstat
return(kde_stat)
}
getARI <- function(to_eval, gs){
result <- aricode::ARI(gs, to_eval)
return(result)
}
getPrecision <- function(to_eval, gs) {
filtered_real_data <- dplyr::filter(gs$res_mtest, adjustedPval < 0.05)
filtered_compared_data <- dplyr::filter(to_eval$res_mtest, adjustedPval < 0.05)
tp <- length(intersect(row.names(filtered_real_data), row.names(filtered_compared_data)))
fp <- length(setdiff(row.names(filtered_compared_data), row.names(filtered_real_data)))
precision <- ifelse((tp + fp) > 0, tp / (tp + fp), NA)
return(precision)
}
getjds <- function(to_eval, gs) {
common_row_names <- intersect(rownames(to_eval), rownames(gs))
real_common <- to_eval[common_row_names, , drop = FALSE]
sim_common <- gs[common_row_names, , drop = FALSE]
jsd_values <- sapply(1:nrow(real_common), function(i) {
x.count <- rbind(as.vector(real_common[i, ]), as.vector(sim_common[i, ]))
philentropy::JSD(x.count, est.prob = "empirical")
})
average_jsd <- mean(jsd_values)
return(average_jsd)
}
getMantel <- function(to_eval, gs) {
mantel_test <- vegan::mantel(gs$Morans.I, to_eval$Morans.I, na.rm = TRUE, method = "pearson")
return(mantel_test$statistic)
}
# data properties
trioB1$addMetric("KDEstat", getKDEstat)
trioB1$addAuxData("FrazZeroCell", getFrazZeroCell, c("KDEstat"))
trioB1$addAuxData("ScaledVarGene", getScaledVarGene, c("KDEstat"))
trioB1$addAuxData("Lstat", getLstat, c("KDEstat"))
# spatial tasks
trioB1$addMetric("clusteringARI", getARI)
trioB1$addAuxData("spatialClustering", data$spatial.cluster, c("clusteringARI"))
# SVG
trioB1$addMetric("Precision", getPrecision)
trioB1$addAuxData("SVG", getSVG, c("Precision"))
# ctdeconvolute
trioB1$addMetric("JDS", getjds)
trioB1$addAuxData("ctDecon", getctDecon(data, sc_data), c("JDS"))
# crosscorrelation
trioB1$addMetric("Mantel", getMantel)
trioB1$addAuxData("crosscor", getmoransI, c("Mantel"))
simulated_SRTsim <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/SRTsim.rds")
simulated_scDesign3 <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/scDesign3.rds")
simulated_scDesign2 <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/scDesign2.rds")
simulated_symsim <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/symsim.rds")
simulated_zinbwave <- readRDS("~/Desktop/manuscript/TrioR/vignettes/26054188/47112109/zinbwave.rds")
evaluation <- trioB1$evaluate(
list(
SRTsim = list(
FrazZeroCell = getFrazZeroCell(simulated_SRTsim),
ScaledVarGene = getScaledVarGene(simulated_SRTsim),
Lstat = getLstat(simulated_SRTsim),
spatialClustering = getSpatialCluster(data, simulated_SRTsim),
SVG = getSVG(simulated_SRTsim),
ctDecon = getctDecon(simulated_SRTsim, sc_data),
crosscor = getmoransI(simulated_SRTsim)
),
scDesign3 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign3),
ScaledVarGene = getScaledVarGene(simulated_scDesign3),
Lstat = getLstat(simulated_scDesign3),
spatialClustering = getSpatialCluster(data, simulated_scDesign3),
SVG = getSVG(simulated_scDesign3),
ctDecon = getctDecon(simulated_scDesign3, sc_data),
crosscor = getmoransI(simulated_scDesign3)
),
scDesign2 = list(
FrazZeroCell = getFrazZeroCell(simulated_scDesign2),
ScaledVarGene = getScaledVarGene(simulated_scDesign2),
Lstat = getLstat(simulated_scDesign2),
spatialClustering = getSpatialCluster(data, simulated_scDesign2),
SVG = getSVG(simulated_scDesign2),
ctDecon = getctDecon(simulated_scDesign2, sc_data),
crosscor = getmoransI(simulated_scDesign2)
),
symsim = list(
FrazZeroCell = getFrazZeroCell(simulated_symsim),
ScaledVarGene = getScaledVarGene(simulated_symsim),
Lstat = getLstat(simulated_symsim),
spatialClustering = getSpatialCluster(data, simulated_symsim),
SVG = getSVG(simulated_symsim),
ctDecon = getctDecon(simulated_symsim, sc_data),
crosscor = getmoransI(simulated_symsim)
),
zinbwave = list(
FrazZeroCell = getFrazZeroCell(simulated_zinbwave),
ScaledVarGene = getScaledVarGene(simulated_zinbwave),
Lstat = getLstat(simulated_zinbwave),
spatialClustering = getSpatialCluster(data, simulated_zinbwave),
SVG = getSVG(simulated_zinbwave),
ctDecon = getctDecon(simulated_zinbwave, sc_data),
crosscor = getmoransI(simulated_zinbwave)
)
)
)
evaluation$result <- as.numeric(unlist(evaluation$result))
knitr::opts_chunk$set(echo = TRUE)
trioA <- Trio$new("figshare:26054188/47112109")
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
library(BenchHub)
testCache <- tempdir()
testCache
trioA <- Trio$new("figshare:26054188/47112109")
